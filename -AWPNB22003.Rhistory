#Daten Speichern
kantonale_vorlagen_list <- kantonale_vorlagen_list[-1,]
View(kantonale_vorlagen_list)
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen")
###Config: Bibliotheken laden, Pfade/Links definieren, bereits vorhandene Daten laden
source("config.R",encoding = "UTF-8")
###Funktionen laden
source("functions_readin.R", encoding = "UTF-8")
source("functions_storyfinder.R", encoding = "UTF-8")
source("functions_storybuilder.R", encoding = "UTF-8")
source("functions_output.R", encoding = "UTF-8")
###Overviews Kantone
kantone_list <- json_data_kantone[["kantone"]]
###Dataframe für Liste
kantonale_vorlagen_list <- data.frame("Kanton","Vorlage_ID","Vorlage_d","Vorlage_f","Vorlage_i")
colnames(kantonale_vorlagen_list) <- c("Kanton","Vorlage_ID","Vorlage_d","Vorlage_f","Vorlage_i")
for (k in 1:nrow(kantone_list)) {
vorlagen <- kantone_list$vorlagen[[k]]
for (i in 1:nrow(vorlagen)) {
vorlage_titel <- vorlagen$vorlagenTitel[[i]]
vorlage_titel <- vorlage_titel %>%
filter(nchar(text) > 5)
titel_de <- ""
titel_fr <- ""
titel_it <- ""
for (v in 1:nrow(vorlage_titel)) {
if (vorlage_titel$langKey[v] == "de") {
titel_de <- vorlage_titel$text[v]
}
if (vorlage_titel$langKey[v] == "fr") {
titel_fr <- vorlage_titel$text[v]
}
if (vorlage_titel$langKey[v] == "it") {
titel_it <- vorlage_titel$text[v]
}
}
new_entry <- data.frame(kantone_list$geoLevelname[k],
vorlagen$vorlagenId[i],
titel_de,
titel_fr,
titel_it
)
colnames(new_entry) <- c("Kanton","Vorlage_ID","Vorlage_d","Vorlage_f","Vorlage_i")
kantonale_vorlagen_list <- rbind(kantonale_vorlagen_list,new_entry)
}
}
#Daten Speichern
kantonale_vorlagen_list <- kantonale_vorlagen_list[-1,]
View(kantonale_vorlagen_list)
library(xlsx)
write.xlsx(kantonale_vorlagen_list,"./Data/kantonale_vorlagen_list.xlsx",row.names = FALSE)
#repeat{
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen")
###Config: Bibliotheken laden, Pfade/Links definieren, bereits vorhandene Daten laden
source("config.R",encoding = "UTF-8")
###Funktionen laden
source("functions_readin.R", encoding = "UTF-8")
source("functions_storyfinder.R", encoding = "UTF-8")
source("functions_storybuilder.R", encoding = "UTF-8")
source("functions_output.R", encoding = "UTF-8")
#Aktualisierungs-Check: Gibt es neue Daten?
timestamp_national <- read.csv("./Timestamp/timestamp_national.txt",header=FALSE)[1,1]
timestamp_kantonal <- read.csv("./Timestamp/timestamp_kantonal.txt",header=FALSE)[1,1]
time_check_national <- timestamp_national == json_data$timestamp
time_check_kantonal <- timestamp_kantonal == json_data_kantone$timestamp
###Kantonale Abstimmungen Uebersicht
source("kantonale_abstimmungen_uebersicht.R", encoding="UTF-8")
#repeat{
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen")
###Config: Bibliotheken laden, Pfade/Links definieren, bereits vorhandene Daten laden
source("config.R",encoding = "UTF-8")
###Funktionen laden
source("functions_readin.R", encoding = "UTF-8")
source("functions_storyfinder.R", encoding = "UTF-8")
source("functions_storybuilder.R", encoding = "UTF-8")
source("functions_output.R", encoding = "UTF-8")
#Aktualisierungs-Check: Gibt es neue Daten?
timestamp_national <- read.csv("./Timestamp/timestamp_national.txt",header=FALSE)[1,1]
timestamp_kantonal <- read.csv("./Timestamp/timestamp_kantonal.txt",header=FALSE)[1,1]
time_check_national <- timestamp_national == json_data$timestamp
time_check_kantonal <- timestamp_kantonal == json_data_kantone$timestamp
#repeat{
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen")
###Config: Bibliotheken laden, Pfade/Links definieren, bereits vorhandene Daten laden
source("config.R",encoding = "UTF-8")
###Funktionen laden
source("functions_readin.R", encoding = "UTF-8")
source("functions_storyfinder.R", encoding = "UTF-8")
source("functions_storybuilder.R", encoding = "UTF-8")
source("functions_output.R", encoding = "UTF-8")
#Aktualisierungs-Check: Gibt es neue Daten?
timestamp_national <- read.csv("./Timestamp/timestamp_national.txt",header=FALSE)[1,1]
timestamp_kantonal <- read.csv("./Timestamp/timestamp_kantonal.txt",header=FALSE)[1,1]
time_check_national <- timestamp_national == json_data$timestamp
time_check_kantonal <- timestamp_kantonal == json_data_kantone$timestamp
###Kantonale Abstimmungen Uebersicht
source("kantonale_abstimmungen_uebersicht.R", encoding="UTF-8")
View(datawrapper_ids)
View(data_overview)
View(vorlagen)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/kantonale_abstimmungen_uebersicht.R', encoding = 'UTF-8', echo=TRUE)
#Make Commit
git2r::config(user.name = "awp-finanznachrichten",user.email = "sw@awp.ch")
token <- read.csv("C:/Users/sw/OneDrive/Github_Token/token.txt",header=FALSE)[1,1]
git2r::cred_token(token)
gitadd()
gitcommit()
gitpush()
print(paste0("Resultate von folgender kantonalen Abstimmung sind komplett: ",
titel_all$Vorlage_d[1],
titel_all$Vorlage_f[1],
titel_all$Vorlage_i[1]))
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
View(datawrapper_codes_kantonal)
###Kantonale Abstimmungen###
source("kantonale_abstimmungen.R", encoding="UTF-8")
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
View(datawrapper_codes_vorlage)
kantonal_short[k]
datawrapper_codes_kantonal$Vorlage
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
View(results)
#Texte einfügen
results <- build_texts(results)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
View(json_data_kantone)
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
#repeat{
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen")
###Config: Bibliotheken laden, Pfade/Links definieren, bereits vorhandene Daten laden
source("config.R",encoding = "UTF-8")
#Tabellen aktualisieren
source("./top_flop/top_flop_chartbuilder_de-2144680.R", encoding = "UTF-8")
getwd()
#Tabellen aktualisieren
source("./top_flop/top_flop_chartbuilder_de-2144680.R", encoding = "UTF-8")
#Tabellen aktualisieren
source("./top_flop/top_flop_chartbuilder_de-2144680.R")
#Tabellen aktualisieren
source("./top_flop/top_flop_chartbuilder_de-2144680.R")
, encoding = "UTF-8"
#Tabellen aktualisieren
source("./top_flop/top_flop_chartbuilder_de-2144680.R", encoding = "UTF-8")
#Tabellen aktualisieren
source("./top_flop/top_flop_chartbuilder_de-2144680.R", encoding = "UTF-8")
#Tabellen aktualisieren
source("./top_flop/top_flop_chartbuilder_de-2144680.R", encoding = "UTF-8")
#Tabellen aktualisieren
source("./top_flop/top_flop_chartbuilder_de-2144680.R", encoding = "UTF-8")
#Tabellen aktualisieren
source("./top_flop/top_flop_chartbuilder_de-2144680.R", encoding = "UTF-8")
source("./top_flop/top_flop_chartbuilder_fr-2144681.R", encoding = "UTF-8")
source("./top_flop/top_flop_chartbuilder_it-2144682.R", encoding = "UTF-8")
#Make Commit
token <- read.csv("C:/Users/sw/OneDrive/Github_Token/token.txt",header=FALSE)[1,1]
git2r::cred_token(token)
gitadd()
gitcommit()
gitpush()
cat("Daten erfolgreich auf Github hochgeladen\n")
#repeat{
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen")
###Config: Bibliotheken laden, Pfade/Links definieren, bereits vorhandene Daten laden
source("config.R",encoding = "UTF-8")
###Funktionen laden
source("functions_readin.R", encoding = "UTF-8")
source("functions_storyfinder.R", encoding = "UTF-8")
source("functions_storybuilder.R", encoding = "UTF-8")
source("functions_output.R", encoding = "UTF-8")
#OCDE
chart_metadata <- dw_retrieve_chart_metadata("GwAFG")
intro_text_de <- chart_metadata$content$
View(chart_metadata)
intro_text_de <- chart_metadata$content$
View(chart_metadata)
View(chart_metadata)
intro_text_de <- chart_metadata$content$metadata$describe$intro
chart_metadata <- dw_retrieve_chart_metadata("x27Qd")
intro_text_de <- chart_metadata$content$metadata$describe$intro
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
View(json_data)
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
#OCDE
chart_metadata <- dw_retrieve_chart_metadata("GwAFG")
intro_text_de
intro_text_de <- gsub("[.].*","",chart_metadata$content$metadata$describe$intro)
intro_text_de
chart_metadata <- dw_retrieve_chart_metadata("Rm3OV")
intro_text_it <- gsub("[.].*","",chart_metadata$content$metadata$describe$intro)
intro_text_it
###Output generieren für Datawrapper ZOL
View(results)
results
###Output generieren für Datawrapper ZOL
results[results$Gemeinde_Nr > 6704 & results$Gemeinde_Nr < 6710,]
###Output generieren für Datawrapper ZOL
test <- results[results$Gemeinde_Nr > 6704 & results$Gemeinde_Nr < 6710,]
output_dw_ZOL <- results %>%
filter(Gemeinde_Nr %in% 111:121 |
Gemeinde_Nr %in% 171:200)
output_dw_ZOL <- results %>%
filter(Gemeinde_Nr %in% 6704:6710 |
Gemeinde_Nr %in% 6715:6720)
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
output_dw_zentralschweiz_kantone <- get_output_kantone(output_dw_zentralschweiz)
View(output_dw_zentralschweiz)
View(results)
output_dw_zentralschweiz_kantone <- get_output_kantone(output_dw_zentralschweiz)
output_dw_zentralschweiz <- results[results$Kanton_Short == "LU" |
results$Kanton_Short == "SZ" |
results$Kanton_Short == "OW" |
results$Kanton_Short == "NW" |
results$Kanton_Short == "ZG" |
results$Kanton_Short == "UR" ,
#results$Gemeinde_Nr < 15,
]
output_dw_zentralschweiz_kantone <- get_output_kantone(output_dw_zentralschweiz)
output_dw_zentralschweiz <- get_output_gemeinden(output_dw_zentralschweiz)
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
#repeat{
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen")
###Config: Bibliotheken laden, Pfade/Links definieren, bereits vorhandene Daten laden
source("config.R",encoding = "UTF-8")
###Funktionen laden
source("functions_readin.R", encoding = "UTF-8")
source("functions_storyfinder.R", encoding = "UTF-8")
source("functions_storybuilder.R", encoding = "UTF-8")
source("functions_output.R", encoding = "UTF-8")
#Aktualisierungs-Check: Gibt es neue Daten?
timestamp_national <- read.csv("./Timestamp/timestamp_national.txt",header=FALSE)[1,1]
timestamp_kantonal <- read.csv("./Timestamp/timestamp_kantonal.txt",header=FALSE)[1,1]
time_check_national <- timestamp_national == json_data$timestamp
time_check_kantonal <- timestamp_kantonal == json_data_kantone$timestamp
time_check_national <- FALSE
time_check_kantonal <- FALSE
#Anzahl, Name und Nummer der Vorlagen von JSON einlesen
vorlagen <- get_vorlagen(json_data,"de")
vorlagen$text
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/simon/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R', encoding = 'UTF-8', echo=TRUE)
View(results)
kantone_list
View(kantone_list)
###Kantonale Abstimmungen Uebersicht
source("kantonale_abstimmungen_uebersicht.R", encoding="UTF-8")
###Kantonale Abstimmungen Uebersicht
source("kantonale_abstimmungen_uebersicht.R", encoding="UTF-8")
#Ja_Stimmen_Kanton Simulation
Ja_Stimmen_Kanton <- sample(1:100,1)
###Kantonale Abstimmungen Uebersicht
source("kantonale_abstimmungen_uebersicht.R", encoding="UTF-8")
print(paste0("Resultate von folgender kantonalen Abstimmung aus ",kantone_list$geoLevelname[k]," sind komplett:\n ",
titel_all$Vorlage_d[1],"\n",
titel_all$Vorlage_f[1],"\n",
titel_all$Vorlage_i[1]))
print(paste0("Resultate von folgender kantonalen Abstimmung aus ",kantone_list$geoLevelname[k]," sind komplett:<br> ",
titel_all$Vorlage_d[1],"\n",
titel_all$Vorlage_f[1],"\n",
titel_all$Vorlage_i[1]))
}
cat(paste0("Resultate von folgender kantonalen Abstimmung aus ",kantone_list$geoLevelname[k]," sind komplett:\n ",
titel_all$Vorlage_d[1],"\n",
titel_all$Vorlage_f[1],"\n",
titel_all$Vorlage_i[1]))
###Kantonale Abstimmungen Uebersicht
source("kantonale_abstimmungen_uebersicht.R", encoding="UTF-8")
#Make Commit
token <- read.csv("C:/Users/simon/OneDrive/Github_Token/token.txt",header=FALSE)[1,1]
git2r::cred_token(token)
gitadd()
gitcommit()
gitpush()
library(httr)
### add the loop here
url <- "https://jeux.loro.ch/"
h <- read_html(url)
test <- h %>% html_nodes("[class='ticket-game__heading__price homeTile']") %>%
xml_text() %>% parse_number(locale=locale(grouping_mark="'", decimal_mark="."))
library(dplyr)
test <- h %>% html_nodes("[class='ticket-game__heading__price homeTile']") %>%
xml_text() %>% parse_number(locale=locale(grouping_mark="'", decimal_mark="."))
test <- h %>% html_nodes("[class='ticket-game__heading__price homeTile']") %>%
xml_text()
library(rvest)
library(tidyverse)
library(stringr)
library(RCurl)
library(readxl)
library(gsubfn)
library(lubridate)
library(naptime)
library(XML)
library(xml2)
library(httr)
setwd("C:/Automatisierungen/sda_lotto")
test <- h %>% html_nodes("[class='ticket-game__heading__price homeTile']") %>%
xml_text() %>% parse_number(locale=locale(grouping_mark="'", decimal_mark="."))
### add the loop here
url <- "https://jeux.loro.ch/"
h <- read_html(url)
test <- h %>% html_nodes("[class='ticket-game__heading__price homeTile']") %>%
xml_text() %>% parse_number(locale=locale(grouping_mark="'", decimal_mark="."))
test <- h %>% html_nodes("[class='ticket-game__heading__price homeTile']") %>%
xml_text()
View(h)
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
timestamp_kantonal
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
###Kantonale Abstimmungen Uebersicht
source("kantonale_abstimmungen_uebersicht.R", encoding="UTF-8")
library(rsvg)
library(magick)
library(DatawRappr)
library(zip)
library(RCurl)
#Working Directory definieren
setwd("C:/Users/simon/OneDrive/LENA_Project/lena_juni2023")
library(rsvg)
library(magick)
library(DatawRappr)
library(zip)
library(RCurl)
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/lena_juni2023")
library(rsvg)
library(magick)
library(DatawRappr)
library(zip)
library(RCurl)
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen")
###Config: Bibliotheken laden, Pfade/Links definieren, bereits vorhandene Daten laden
source("config.R",encoding = "UTF-8")
source("functions_readin.R", encoding = "UTF-8")
#Vorlagen Codes
vorlage_gemeinde <- c("kDkMR","5NIK3","Idw6B")
vorlage_kantone <- c("Tfr6N","qI7hZ","GAF2u")
#Ordner Codes
folder_de <- "117142"
folder_fr <- "117143"
folder_it <- "117144"
#Datum
datum_de <- "18. Juni 2023"
datum_fr <- "18 juin 2023"
datum_it <- "18 percentuale sì 2023"
#Vorlagen einlesen und Klammern entfernen
##Deutsch
vorlagen <- get_vorlagen(json_data,"de")
vorlagen$text[1] <- "Abstimmung über OECD-Mindeststeuer (Verfassungsänderung)"
vorlagen$text[2] <- "Abstimmung über Klimagesetz (Referendum)"
vorlagen$text[3] <- "Abstimmung über Covid-19-Gesetz (Referendum)"
#Französisch
vorlagen_fr <- get_vorlagen(json_data,"fr")
vorlagen_fr$text[1] <- "Réforme de l'imposition minimale selon les standards de l'OCDE"
vorlagen_fr$text[2] <- "Loi sur le climat"
vorlagen_fr$text[3] <- "Modification de la loi sur le Covid"
vorlagen_it <- get_vorlagen(json_data,"it")
vorlagen$text <- str_replace(vorlagen$text, "\\s*\\([^\\)]+\\)", "")
vorlagen_fr$text <- str_replace(vorlagen_fr$text, "\\s*\\([^\\)]+\\)", "")
vorlagen_it$text <- str_replace(vorlagen_it$text, "\\s*\\([^\\)]+\\)", "")
vorlagen
i <- 1
tionale Ergebnisse holen
#Nationale Ergebnisse holen
results_national <- get_results(json_data,i,level="national")
Ja_Anteil <- round(results_national$jaStimmenInProzent,1)
Nein_Anteil <- round(100-results_national$jaStimmenInProzent,1)
Stimmbeteiligung <- round(results_national$stimmbeteiligungInProzent,1)
Staende_Ja <- results_national$jaStaendeGanz+(results_national$jaStaendeHalb/2)
Staende_Nein <- results_national$neinStaendeGanz+(results_national$neinStaendeHalb/2)
#####DEUTSCH
###Flexible Grafik-Bausteine erstellen
titel <- vorlagen$text[i]
undertitel_text <- paste0("<b>Eidgenössische Volksabstimmung vom ",datum_de,"</b>")
#Undertitel Balken
length_yes <- round(Ja_Anteil/5)
length_no <- round(Nein_Anteil/5)
length_stimmbeteiligung <- round(Stimmbeteiligung/5)
length_Staende_Ja <- round(((Staende_Ja*100)/23)/5)
length_Staende_Nein <- round(((Staende_Nein*100)/23)/5)
undertitel_balken_firstline <- paste0('<b style="background:	#FFFFFF; color:black; padding:1px 6px">',
strrep("&nbsp;",30),
"</b><b>Volk</b>",
'<b style="background:	#FFFFFF; color:black; padding:1px 6px">',
strrep("&nbsp;",60),
"</b><b>Stände</b>"
)
undertitel_balken_secondline <- paste0(strrep("&nbsp;",8),
"Ja ",gsub("[.]",",",Ja_Anteil),"% ",
'<b style="background:	#89CFF0; color:black; padding:1px 6px">',
strrep("&nbsp;",length_yes),"</b>",
'<b style="background:		#F88379; color:black; padding:1px 6px">',
strrep("&nbsp;",length_no),"</b>",
" ",gsub("[.]",",",Nein_Anteil),"% Nein",
'<b style="background:	#FFFFFF; color:black; padding:1px 6px">',
strrep("&nbsp;",10),"</b>",
"Ja ",Staende_Ja," ",
'<b style="background:	#89CFF0; color:black; padding:1px 6px">',
strrep("&nbsp;",length_Staende_Ja),"</b>",
'<b style="background:		#F88379; color:black; padding:1px 6px">',
strrep("&nbsp;",length_Staende_Nein),"</b>",
" ",Staende_Nein," Nein"
)
undertitel_all <- paste0(undertitel_text,"<br><br>",
undertitel_balken_firstline,
"<br>",
undertitel_balken_secondline,
"<br>&nbsp;")
#Fix 0
undertitel_all <- gsub('Ja 0 <b style="background:	#89CFF0; color:black; padding:1px 6px">',
'Ja 0 <b style="background:	#89CFF0; color:black; padding:1px 0px">',
undertitel_all)
undertitel_all <- gsub('6px"></b> 0 Nein',
'0px"></b> 0 Nein',
undertitel_all)
footer <- paste0('Quelle: BFS, Lena',
'<b style="background:	#FFFFFF; color:black; padding:1px 6px">',
strrep("&nbsp;",28),
"</b>Stand: ",format(Sys.time(),"%d.%m.%Y %H:%M Uhr"),
'<b style="background:	#FFFFFF; color:black; padding:1px 6px">',
strrep("&nbsp;",25),
"</b>Grafik: Keystone-SDA"
)
###Vorlage kopieren
new_chart <-dw_copy_chart(vorlage_kantone[1])
chart_metadata <- dw_retrieve_chart_metadata(new_chart$id)
adapted_list <- chart_metadata[["content"]][["metadata"]][["visualize"]]
adapted_list$`text-annotations`[[1]]$text <- gsub("#voters",paste0(gsub("[.]",",",Stimmbeteiligung),"%"),adapted_list$`text-annotations`[[1]]$text)
#Grafik anpassen
dw_edit_chart(new_chart$id,title=titel,
intro=undertitel_all,
visualize=adapted_list,
annotate=footer,
data=list("external-data"=paste0("https://raw.githubusercontent.com/awp-finanznachrichten/lena_",tolower(abstimmung_date),"/master/Output/",vorlagen_short[i],"_dw_kantone.csv")),
axes=list("values"="Kanton_color"),
folderId = folder_de)
###Bilddaten speichen und hochladen für Kanton
setwd("./Grafiken")
#Create Folder
folder_name <- paste0("LENA_Kantone_",vorlagen_short[i],"_DE")
dir.create(folder_name)
setwd(paste0("./",folder_name))
#Als JPEG
map <- dw_export_chart(new_chart$id, plain=FALSE,border_width = 20)
image_write(map,path="preview.jpg",format="jpeg")
#Als SVG &  EPS
map <- dw_export_chart(new_chart$id, type="svg",plain=FALSE,border_width = 20)
cat(map,file=paste0("LENA_Kantone_",vorlagen_short[i],".svg"))
map <- charToRaw(map)
rsvg_eps(map,paste0("LENA_Kantone_",vorlagen_short[i],".eps"),width=4800)
#Metadata
metadata <- paste0("i5_object_name=SCHWEIZ ABSTIMMUNGEN ",toupper(titel),"\n",
"i55_date_created=",format(Sys.Date(),"%Y%m%d"),"\n",
"i120_caption=INFOGRAFIK - Eidgenoessische Volksabstimmung vom ",datum_de," - ",titel,". Diese Infografik wurde automatisiert vom Schreibroboter Lena erstellt.\n",
"i103_original_transmission_reference=\n",
"i90_city=\n",
"i100_country_code=CHE\n",
"i15_category=N\n",
"i105_headline=Politik, Wirtschaft\n",
"i40_special_instructions=Die Infografik kann im Grafikformat EPS und SVG bezogen werden. Diese Infografik wurde automatisiert vom Schreibroboter Lena erstellt.\n",
"i110_credit=KEYSTONE\n",
"i115_source=KEYSTONE\n",
"i80_byline=Lena\n",
"i122_writer=Lena\n")
cat(metadata,file="metadata.properties")
#Zip-File erstellen
zip::zip(zipfile = paste0('LENA_Kantone_',vorlagen_short[i],'_DEU.zip'),
c(paste0("LENA_Kantone_",vorlagen_short[i],".eps"),paste0("LENA_Kantone_",vorlagen_short[i],".svg"),"preview.jpg","metadata.properties"), mode="cherry-pick")
#Chart löschen
dw_delete_chart(new_chart$id)
setwd("..")
setwd("..")
#OECD_Mindeststeuer
data_OECD_Mindeststeuer <- read_csv("Output/OECD_Mindeststeuer_dw.csv")
#Working Directory definieren
setwd("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen")
###Config: Bibliotheken laden, Pfade/Links definieren, bereits vorhandene Daten laden
source("config.R",encoding = "UTF-8")
###Funktionen laden
source("functions_readin.R", encoding = "UTF-8")
source("functions_storyfinder.R", encoding = "UTF-8")
source("functions_storybuilder.R", encoding = "UTF-8")
source("functions_output.R", encoding = "UTF-8")
###Datenfeeds für Kunden###
source("datenfeeds_kunden.R", encoding="UTF-8")
#Make Commit
token <- read.csv("C:/Users/sw/OneDrive/Github_Token/token.txt",header=FALSE)[1,1]
git2r::cred_token(token)
gitadd()
gitcommit()
gitpush()
cat("Daten erfolgreich auf Github hochgeladen\n")
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/outputs_einzugsgebiete.R")
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
source("C:/Users/sw/OneDrive/LENA_Project/20230618_LENA_Abstimmungen/lena_run.R")
